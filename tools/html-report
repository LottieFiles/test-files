#!/usr/bin/env python3
import json
import argparse
from pathlib import Path
from xml.etree import ElementTree


def html_percent(value, parent, title):
    e = ElementTree.SubElement(parent, "div")
    e.attrib["class"] = "percent-parent"
    e.attrib["title"] = title
    ElementTree.SubElement(e, "span").text = "%.3g%%" % (value * 100)
    bar = ElementTree.SubElement(e, "span")
    bar.attrib["class"] = "percent-bar"
    ElementTree.SubElement(bar, "span").attrib["style"] = "width: %s%%" % (value * 100)


def render_html(report, path: Path, absolute: bool):
    html = ElementTree.Element("html")
    head = ElementTree.SubElement(html, "head")
    ElementTree.SubElement(head, "style").text = """
    body {
        width: 100vw;
        max-width: 1024px;
        margin: 0 auto;
    }

    td:first-child {
        width: 100%;
    }

    td, th {
        border: 1px solid silver;
        padding: 5px;
        white-space: nowrap;
        /*height: inherit;*/
    }

    th {
        background: #eee;
    }

    table {
        border-collapse: collapse;
        width: 100%;
        height: 1px; /* ignored but needed for height:100% in td o_O */
    }

    table img {
        display: block;
        margin: 0 auto;
    }

    td.bad {
        background: #fcc;
    }
    td.meh {
        background: #eea;
    }

    .percent-parent {
        display: flex;
        flex-flow: column;
    }

    span.percent-bar {
        height: 5px;
        border: 1px solid silver;
        background: #c44;
    }

    .percent-bar > span {
        background: #4c4;
        display: block;
        height: 100%;
    }

    .score-set {
        display: flex;
        justify-content: space-around;
        border-top: 1px solid silver;
        margin: 0 -5px;
        padding: 0 5px;
    }

    .result-pic {
        display: flex;
        flex-flow: column;
        height: 100%;
    }
    """
    if len(report["meta"]) == 1:
        meta = report["meta"][0]
        column_titles = [report["meta"][0]["label"] or "Result"]
    else:
        formats = []
        commands = []
        column_titles = []

        def push(ls, item):
            if not ls or ls[-1] != item:
                ls.append(item)

        for rm in report["meta"]:
            push(formats, rm["format"])
            push(commands, rm["command"])
            column_titles.append(rm["label"])

        meta = {
            "title": report["meta"][0]["title"],
            "format": ", ".join(formats),
            "command": "\n".join(commands),
            "comment": "",
        }

    title = "%s %s report" % (meta["title"], meta["format"])
    ElementTree.SubElement(head, "title").text = title
    body = ElementTree.SubElement(html, "body")

    ElementTree.SubElement(body, "h1").text = title
    if meta["comment"]:
        p = ElementTree.SubElement(body, "p")
        p.text = ElementTree.SubElement(body, "p").text = meta["comment"]

    if meta["command"]:
        ElementTree.SubElement(body, "p").text = "Render command:"
        ElementTree.SubElement(ElementTree.SubElement(body, "p"), "code").text = meta["command"]

    ElementTree.SubElement(body, "h2").text = "Features"
    table = ElementTree.SubElement(body, "table")
    tr = ElementTree.SubElement(table, "tr")
    ElementTree.SubElement(tr, "th").text = "Feature"
    for col in column_titles:
        ElementTree.SubElement(tr, "th").text = col

    for fname, fdata in sorted(report["features"].items()):
        tr = ElementTree.SubElement(table, "tr")
        ElementTree.SubElement(tr, "td").text = fname
        for score in fdata["score"]:
            html_percent(score / fdata["max"], ElementTree.SubElement(tr, "td"), "Score")

    ElementTree.SubElement(body, "h2").text = "Tests"

    button = ElementTree.SubElement(body, "button")
    button.text = "All"
    button.attrib["onclick"] = '''document.getElementById("table-tests").querySelectorAll("tr:not(.title)").forEach(tr => {
        tr.style.display = "table-row";
    });'''

    button = ElementTree.SubElement(body, "button")
    button.text = "Only Failures"
    button.attrib["onclick"] = '''document.getElementById("table-tests").querySelectorAll("tr:not(.title)").forEach(tr => {
        tr.style.display = tr.dataset.status == "ok" ? "none" : "table-row";
    });'''

    input = ElementTree.SubElement(body, "input")
    input.attrib["placeholder"] = "Filter"
    input.attrib["oninput"] = '''document.getElementById("table-tests").querySelectorAll("tr:not(.title)").forEach(tr => {
        tr.style.display = this.value != "" && tr.textContent.indexOf(this.value) == -1 ? "none" : "table-row";
    });'''

    table = ElementTree.SubElement(body, "table")
    table.attrib["id"] = "table-tests"
    tr = ElementTree.SubElement(table, "tr")
    tr.attrib["class"] = "title"
    ElementTree.SubElement(tr, "th").text = "Name"
    ElementTree.SubElement(tr, "th").text = "File"
    ElementTree.SubElement(tr, "th").text = "Score"
    ElementTree.SubElement(tr, "th").text = "Reference"
    for col in column_titles:
        ElementTree.SubElement(tr, "th").text = col

    def score_class(element, score):
        if score < 0.8:
            element.attrib["class"] = "bad"
        elif score < 1:
            element.attrib["class"] = "meh"
        else:
            element.attrib["class"] = "good"

    def src(path):
        if absolute:
            return "file://" + str(Path(path).absolute())
        return path

    for item in report["tests"]:
        tr = ElementTree.SubElement(table, "tr")
        avg_score = item["score"] / item["max"]

        ElementTree.SubElement(tr, "td").text = item["test"]
        ElementTree.SubElement(tr, "td").text = item["file"]
        html_percent(avg_score, ElementTree.SubElement(tr, "td"), "Average Score")

        col = ElementTree.SubElement(ElementTree.SubElement(tr, "td"), "div")
        col.attrib["class"] = "result-pic"
        if item["reference"]:
            ElementTree.SubElement(col, "img").attrib["src"] = src(item["reference"])

        ElementTree.SubElement(col, "div").attrib["class"] = "score-set"

        for result in item["results"]:
            td = ElementTree.SubElement(tr, "td")
            score_class(td, result["score"])

            tr.attrib["data-status"] = "fail" if result["score"] < 1 else "ok"

            col = ElementTree.SubElement(td, "div")
            col.attrib["class"] = "result-pic"

            if result["file"]:
                ElementTree.SubElement(col, "img").attrib["src"] = src(result["file"])
            else:
                ElementTree.SubElement(col, "div")

            div = ElementTree.SubElement(col, "div")
            div.attrib["class"] = "score-set"
            html_percent(result["uqi"], div, "UQI")
            html_percent(result["score"], div, "Score")

    footer = ElementTree.SubElement(ElementTree.SubElement(body, "footer"), "p")
    footer.text = "Report generated from "
    link = ElementTree.SubElement(footer, "a")
    link.text = "Lottie test files"
    link.attrib["href"] = "https://github.com/LottieFiles/test-files"
    link.tail = "."

    ElementTree.indent(html)
    with open(path, "wb") as f:
        f.write(ElementTree.tostring(html, "utf8", "html"))

    print("HTML report created at file://%s" % path.absolute())


parser = argparse.ArgumentParser(
    description="Generate the HTML visualization of a report"
)
parser.add_argument(
    "report",
    help="Path of the report file",
    type=Path
)
parser.add_argument(
    "--output", "-o",
    type=Path,
    help="File path for the HTML report",
    default=None
)
parser.add_argument(
    "--relative",
    help="Make test paths relative to this",
    type=Path,
    default=None
)

args = parser.parse_args()

if args.output:
    output = args.output
else:
    output = Path(args.report)
    output.suffix = ".html"

with open(args.report) as f:
    data = json.load(f)

render_html(data, output, args.relative is None)
