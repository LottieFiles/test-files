#!/usr/bin/env python3

import re
import sys
import time
import json
import shlex
import argparse
import subprocess
import multiprocessing
from pathlib import Path

from script_utils import DirectoryScanner


class Job:
    def __init__(self, infile, outfile, out_rel, frame):
        self.infile = str(infile)
        self.outfile = outfile
        self.frame = frame
        self.time = 0
        self.name = str(out_rel)


class CmdParam:
    def __init__(self, command, guard, replace):
        self.guard = guard
        try:
            self.index = command.index(guard)
        except ValueError:
            self.index = -1
        self.replace = replace

    def __call__(self, cmd, job):
        if self.index != -1:
            cmd[self.index] = str(self.replace(job))



def invoke(job: Job):
    cmd = list(args.command)
    for param in params:
        param(cmd, job)

    cmd_string = " ".join(map(shlex.quote, cmd))
    try:
        ts = time.perf_counter_ns()
        rc = subprocess.call(cmd)
        te = time.perf_counter_ns()
        job.time = te - ts
        if rc == 0:
            print("PASS", cmd_string)
        else:
            print("FAIL", cmd_string)
    except Exception as e:
        print("FAIL", cmd_string, e)

    return (job.name, job.time)


def collect_files(file: Path, relpath: Path, jobs: list):
    if file.suffix == ".png" and "asset" not in file.stem:
        m = re.match("(.*)-([0-9]+)$", file.stem)
        basename = m.group(1)
        in_file = file.parent / (basename + input_suffix)
        if in_file.exists():
            frame_number = m.group(2)
            out_rel = relpath.parent / ("%s-%s.png" % (basename, frame_number))
            out_file = args.output / out_rel
            out_file.parent.mkdir(parents=True, exist_ok=True)
            jobs.append(Job(in_file, out_file, out_rel, frame_number))
        else:
            skipped.add(str(relpath.parent / basename))


parser = argparse.ArgumentParser(
    description="Creates a render set from example files"
)
parser.add_argument(
    "--reference",
    help="Root path for the reference data",
    type=Path,
    default=(Path(__file__).parent.parent / "data").relative_to(Path().absolute())
)
parser.add_argument(
    "--output", "-o",
    help="Output path",
    type=Path,
    default=Path("/tmp/out")
)
parser.add_argument(
    "--input-format", "-f",
    help="Input Format",
    choices=["aep", "json", "svg"],
    default="json"
)
parser.add_argument(
    "--comment", "-c",
    help="Render set comment",
    default=""
)
parser.add_argument(
    "--title", "-t",
    help="Render set title",
    default=None
)
parser.add_argument(
    "--label", "-l",
    help="Render set label",
    default=None
)
parser.add_argument(
    "command",
    nargs=argparse.REMAINDER,
    help="Renderer command, use {} for the input file name, {frame} for the frame number, {out} for the suggested output filename"
)
args = parser.parse_args()

if "{}" not in args.command:
    sys.stderr.write("Missing {} in the command\n")
    sys.exit(1)

params = [
    CmdParam(args.command, "{}", lambda j: j.infile),
    CmdParam(args.command, "{out}", lambda j: j.outfile),
    CmdParam(args.command, "{frame}", lambda j: int(j.frame)),
    CmdParam(args.command, "{out_path}", lambda j: j.outfile.parent),
]
input_suffix = "." + args.input_format
skipped = set()

args.output.mkdir(parents=True, exist_ok=True)
jobs = []
DirectoryScanner(collect_files).scan(args.reference, jobs)

with multiprocessing.Pool(multiprocessing.cpu_count()) as pool:
    times = pool.map(invoke, jobs)

with open(args.output / "meta.json", "w") as f:
    command_base = Path(args.command[0]).name
    title = args.title or (command_base[0].upper() + command_base[1:])
    json.dump({
        "title": title,
        "label": args.label or ("%s %s" % args.title, args.input_format),
        "comment": args.comment,
        "command": " ".join(map(shlex.quote, [command_base] + args.command[1:])),
        "skipped": list(skipped),
        "format": args.input_format,
        "times": dict(times),
    }, f, indent=4)
