#!/usr/bin/env python3
import os
import tempfile
import argparse
from pathlib import Path

from playwright.sync_api import sync_playwright


with sync_playwright() as p:

    parser = argparse.ArgumentParser()
    parser.add_argument("--lottie-web-url", "-u", default=None)
    parser.add_argument("--lottie-web-version", "-v", default="5.12.2")
    parser.add_argument("--lottie-web-renderer", "-r", default="svg", choices=["svg", "canvas", "html"])
    parser.add_argument("--frame", "-f", type=int, default=0)
    parser.add_argument("--browser", default="chromium", choices=["firefox", "chromium", "webkit"])
    parser.add_argument("--device", choices=list(p.devices.keys()), default=None)
    parser.add_argument("lottie", type=Path)
    parser.add_argument("--output", "-o", type=Path, required=True)
    args = parser.parse_args()


    with open(args.lottie) as f:
        lottie_json = f.read()


    lottie_web_url = args.lottie_web_url
    if not lottie_web_url:
        lottie_web_url = "https://cdnjs.cloudflare.com/ajax/libs/lottie-web/%s/lottie.min.js" % args.lottie_web_version

    html_content = """<?DOCTYPE html?>
<html>
    <head>
        <script src="{lottie_web_url}"></script>
    </head>
    <body>
        <div id="player"><div>
        <script>
            var lottie_json = {lottie_json};
            var player = document.getElementById("player");
            player.style.width = lottie_json.w + "px";
            player.style.height = lottie_json.h + "px";

            var data = {{
                container: document.getElementById('player'),
                renderer: '{renderer}',
                loop: true,
                autoplay: false,
                animationData: lottie_json
            }};
            var anim = bodymovin.loadAnimation(data);
            anim.goToAndStop({frame}, true);
        </script>
     </body>
</html>
""".format(
        lottie_web_url=lottie_web_url,
        renderer=args.lottie_web_renderer,
        lottie_json=lottie_json,
        frame=args.frame
    )

    with tempfile.NamedTemporaryFile("w", suffix=".html") as tmp:
        tmp.write(html_content)
        tmp.flush()

        browser = getattr(p, args.browser).launch()
        if args.device:
            context = browser.new_context(**p.devices[args.device])
        else:
            context = browser

        page = context.new_page()
        page.goto("file://" + tmp.name)
        player = page.locator("#player")
        player.screenshot(path=str(args.output), omit_background=True)
        browser.close()
