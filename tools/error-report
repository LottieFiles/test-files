#!/usr/bin/env python3

import sys
import json
import argparse
from pathlib import Path

def error(label, test, file, message, fatal):
    sys.stderr.write("Error" if fatal else "Warning")
    sys.stderr.write(": ")
    sys.stderr.write(label)
    sys.stderr.write(": ")
    sys.stderr.write(test)
    sys.stderr.write(": ")
    sys.stderr.write(file)
    sys.stderr.write(": ")
    sys.stderr.write(message)
    sys.stderr.write("\n")
    if fatal:
        error.has_error = True

error.has_error = False

parser = argparse.ArgumentParser(
    description="Scans a report and generates error message"
)
parser.add_argument(
    "--ignore", "-i",
    action="append",
    default=[],
    help="Ignore test"
)
parser.add_argument(
    "--score-error",
    type=float,
    default=0.8,
    help="Minimum score required to pass the test"
)
parser.add_argument(
    "--score-pass",
    type=float,
    default=1,
    help="Scores below this threshold (but above score-error) will show a warning but won't fail the test"
)
parser.add_argument(
    "report",
    help="Report JSON file",
    type=Path
)

args = parser.parse_args()
ignored = set(args.ignore)

with open(args.report) as f:
    report = json.load(f)

for i, meta in enumerate(report["meta"]):
    label = meta["label"]
    skip = set(meta["skipped"])|ignored
    for test in report["tests"]:
        name = test["test"]
        if name in skip:
            continue

        file = test["file"]
        result = test["results"][i]

        if result["status"] != "ok":
            error(label, name, file, result["status"], True)
            continue

        score = result["score"]
        if score < args.score_error:
            error(label, name, file, "Score %0.2f" % score, True)
        elif score < args.score_pass:
            error(label, name, file, "Score %0.2f" % score, False)


if error.has_error:
    sys.exit(1)
