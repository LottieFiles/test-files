#!/usr/bin/env python3

import re
import sys
import json
import struct
import argparse
from pathlib import Path

from script_utils import Column, Table, DirectoryScanner

def gather_features(file: Path, relpath: Path, features: dict):
    if file.name.endswith("-meta.json"):
        with open(file) as f:
            data = json.load(f)

            test_features = set(data["features"])
            for feat in data["features"]:
                split = feat.split("/")
                for i in range(len(split)):
                    test_features.add("/".join(split[0:i+1]))

            for feature in test_features:
                if feature not in features:
                    features[feature] = {"count": 1, "data": None}
                else:
                    features[feature]["count"] += 1


def get_tested_features():
    tested_features = {
        feature: {
            "count": 0,
            "data": data
        }
        for feature, data in feature_data["features"].items()
    }

    DirectoryScanner(gather_features).scan(data_path, tested_features)

    return tested_features


def status(args):
    tested_features = get_tested_features()

    cils = {
        cil: 0
        for cil in feature_data["canilottie"]
    }

    mns = {
        mn: 0
        for mn in feature_data["match_names"]
    }

    feature_table = Table([Column("Feature", "ljust"), "Tests", "Notes"])

    for name, feat in sorted(tested_features.items()):
        issue = ""
        if feat["count"] == 0:
            issue = "No test"
        elif feat["data"] is None:
            issue = "No meta"
        else:
            for mn in feat["data"]["match_names"]:
                mns[mn] += 1
            if feat["data"]["canilottie"]:
                cils[feat["data"]["canilottie"]] += 1

        feature_table.row([name, feat["count"], issue])

    feature_table.write()

    if args.canilottie:
        table = Table([Column("Feature", "ljust"), "Tests", "Notes"])
        for name, count in cils.items():
            table.row([name, count, "" if count else "No test"])
        table.write()

    if args.match_names:
        table = Table([Column("Feature", "ljust"), "Tests", "Notes"])
        for name, count in mns.items():
            table.row([name, count, "" if count else "No test"])
        table.write()


def get_match_names(path: Path, rel: Path, mns: set):
    if path.suffix != ".aep":
        return

    with open(path, "rb") as f:
        data = f.read()

    start = 0
    while True:
        start = data.find(b"tdmn", start)
        if start == -1:
            return
        start += 4
        length = struct.unpack(">i", data[start:start+4])[0]
        if length != 40:
            continue

        start += 4
        end = data.find(b'\0', start)
        if end < start or end > start + length:
            end = start + length

        match_name = data[start:end]
        start = end

        if match_name.startswith(b"ADBE") and match_name != b"ADBE Group End":
            mns.add(re.sub(b" [0-9]+$", b" #", match_name).decode("ascii"))


def handle_missing_data(name, found, apply):
    known = set(feature_data[name])

    missing = found - known

    if missing:
        print("Adding missing %s:" % name.replace("_", " "))
        for mn in missing:
            print(mn)

        if apply:
            feature_data[name] = sorted(known | missing)

            with open(features_paths, "w") as f:
                json.dump(feature_data, f, indent=4)

    else:
        print("Nothing to do")


def scan_aep(args):
    mns = set()
    DirectoryScanner(get_match_names).scan(args.path, mns)
    handle_missing_data("match_names", mns, args.apply)


def scan_canilottie(args):
    path = args.path
    if (path / "data").is_dir():
        path /= "data"

    cil = set()
    for file in path.iterdir():
        cil.add(file.stem)

    handle_missing_data("canilottie", cil, args.apply)


def add(args):
    feature = feature_data["features"].get(args.feature)

    if not feature:
        feature = {
            "canilottie": None,
            "docs": None,
            "match_names": []
        }
        feature_data["features"][args.feature] = feature

    if args.canilottie is not None:
        feature["canilottie"] = args.canilottie

    if args.docs is not None:
        feature["docs"] = args.docs

    if args.match_name is not None:
        feature["match_names"] += args.match_name

    with open(features_paths, "w") as f:
        json.dump(feature_data, f, indent=4)


def missing_item(known, to_check, what):
    missing = set(to_check) - known
    if not missing:
        print("All %s handled" % what)
    else:
        print("Missing %s:" % what)

    for feat in sorted(missing):
        print("    " + feat)

    print("")


def missing(args):
    known = (set(), set(), set())

    for name, feat in feature_data["features"].items():
        known[0].add(name)
        known[1].add(feat["canilottie"])
        known[2].update(set(feat["match_names"]))

    if args.tests or (not args.tests and not args.match_names and not args.canilottie):
        tested_features = get_tested_features()
        missing_item(known[0], tested_features.keys(), "tests")

    if args.canilottie:
        missing_item(known[1], feature_data["canilottie"], "canilottie")

    if args.match_names:
        missing_item(known[2], feature_data["match_names"], "match names")


data_path = Path(__file__).parent.parent / "data"
parser = argparse.ArgumentParser()
sub = parser.add_subparsers(dest="action")

sub_status: argparse.ArgumentParser = sub.add_parser("status")
sub_status.add_argument(
    "--match-names", "-m", "-mn",
    action="store_true"
)
sub_status.add_argument(
    "--canilottie", "-c",
    action="store_true"
)

sub_aep: argparse.ArgumentParser = sub.add_parser(
    "scan-aep",
    description="Scans AEP files and adds missing match names to the feature metadata"
)
sub_aep.add_argument(
    "path",
    type=Path,
    default=data_path,
    nargs="?",
)
sub_aep.add_argument(
    "--apply", "-a",
    help="Apply the missing items to features.json"
)

sub_cil = sub.add_parser(
    "scan-canilottie",
    description="Scans the canilottie repository"
)
sub_cil.add_argument(
    "path",
    type=Path,
)
sub_cil.add_argument(
    "--apply", "-a",
    help="Apply the missing items to features.json"
)


sub_add: argparse.ArgumentParser = sub.add_parser(
    "add",
    description="Adds data to a feature"
)
sub_add.add_argument("feature")
sub_add.add_argument("--docs", "-d", type=str)
sub_add.add_argument("--canilottie", "-c", type=str)
sub_add.add_argument("--match-name", "-m", "-mn", action="append")


sub_missing: argparse.ArgumentParser = sub.add_parser(
    "missing",
    description="Helps discovering missing features"
)
sub_missing.add_argument(
    "--tests", "-t",
    action="store_true"
)
sub_missing.add_argument(
    "--match-names", "-m", "-mn",
    action="store_true"
)
sub_missing.add_argument(
    "--canilottie", "-c",
    action="store_true"
)

args = parser.parse_args()

if not args.action:
    parser.print_help()
    sys.exit(0)

features_paths = Path(__file__).parent / "features.json"
with open(features_paths) as f:
    feature_data = json.load(f)

globals()[args.action.replace("-", "_")](args)
